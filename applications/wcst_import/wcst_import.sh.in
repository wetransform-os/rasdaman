#!/bin/sh
# *
# * This file is part of rasdaman community.
# *
# * Rasdaman community is free software: you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation, either version 3 of the License, or
# * (at your option) any later version.
# *
# * Rasdaman community is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# * See the GNU  General Public License for more details.
# *
# * You should have received a copy of the GNU  General Public License
# * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
# *
# * Copyright 2003 - 2020 Peter Baumann / rasdaman GmbH.
# *
# * For more information please see <http://www.rasdaman.org>
# * or contact Peter Baumann via <baumann@rasdaman.com>.
# *

PROG=$(basename "$0")
VERSION="@VERSION_FULL@"
BUILD="@GIT_HASH@"

WCST_IMPORT_PY_SCRIPT="@WCST_IMPORT_PY_SCRIPT@"
WCST_IMPORT_DAEMON_PY_SCRIPT="@WCST_IMPORT_DAEMON_PY_SCRIPT@"
# env variable used by session.py
export PETASCOPE_PROPERTIES_PATH="@CONF_DIR@/petascope.properties"

RC_OK=0
RC_ERROR=1

daemon_flag=false
watch_flag=false
watch_interval=3600
user=""
passwd=""
identity_file_path=""
# (no limit, cache all files)
gdal_cache_size=-1

# logging
log()  { echo "$PROG: $*"; }
logn() { printf "%s" "$PROG: $*"; }
error(){ echo "$PROG: $*" >&2; exit $RC_ERROR; }

# print optional error, and usage directions
usage()
{
  [ -n "$1" ] && echo "$PROG: $*"
  cat <<EOF
rasdaman $VERSION build $BUILD
Usage: $PROG [OPTION] <ingredients_file>
wcst_import.sh is a tool for importing data into petascope via WCS-T.

Options:
  -d, --daemon <command>
    run as daemon; <command> must be one of start, stop, status, or restart.
  -w, --watch [ <interval> ]
    the daemon (-d) waits for <interval> seconds before checking the ingredients 
    file for new data; by default the interval is 3600 (1 hour).
  -i, --identity-file
    specify a file from which credentials of a valid rasdaman user are read;
    the credentials must be specified in the file as username:password
  -u, --user <username>
    specify a valid user for the petascope endpoint; the password will be
    asked interactively by wcst_import.sh
  -q, --quiet
    suppress regular output
  -c, --gdal-cache-size <size>
    the number of open gdal datasets to keep in cache in order
    to avoid reopening the same files, which can be costly. The
    specified value can be one of: -1 (no limit, cache all files),
    0 (fully disable caching), N (clear the cache whenever it has
    more than N datasets, N should be greater than 0). The
    default value is -1 if this option is not specified.
  --version
    print version
  -h, --help
    display this help and exit
EOF

  exit $RC_OK
}

# ----------------------------------------------------------------------------
# parse command-line options
# ----------------------------------------------------------------------------
quiet=false 
while [ "$1" != "" ]; do
    case $1 in
      -h|--help)                 usage;;
      -q|--quiet)                quiet=true;;
      -d|--daemon)               shift; daemon_flag=true; daemon_action="$1";;
      -w|--watch)                shift; watch_flag=true; watch_interval=$1;;
      -i|--identity-file)        shift; identity_file_path=$(readlink -f "$1");;
      -u|--user)                 shift; user="$1";;
      -c|--gdal-cache-size)      shift; gdal_cache_size="$1";;
      *)                         ingredients_file="$(readlink -f "$1")";;
    esac
    shift
done

if [ "$quiet" = false ]; then
    log "rasdaman $VERSION build $BUILD";
fi

[ "$ingredients_file" = "" ] && usage "no ingredients file specified."

# default it is 3600 seconds for daemon's interval time
if [ -z "$watch_interval" ]; then
    watch_interval=3600
fi

case $watch_interval in
    ''|*[!0-9]*) usage "invalid watch interval specified: $watch_interval";;
    *)           [ "$watch_interval" -gt 0 ] || usage "please specify a positive watch interval.";;
esac

if [ "$watch_flag" = true ] && [ "$daemon_flag" = false ]; then
  daemon_action='start'
  daemon_flag=true
fi

# check if the daemon is active for this ingredients_file
if ps aux | grep -E -v "grep|wcst_import.sh" | grep python | grep "$ingredients_file" > /dev/null; then
  daemon_is_active=true
else
  daemon_is_active=false
fi

# Prevent gdal from creating auxiliary files as it may not have permissions in data folders
export GDAL_PAM_ENABLED=NO

if [ "$daemon_flag" = false ]; then
  if [ "$daemon_is_active" = true ]; then
    echo "$PROG: an instance for this ingredients file is already running, please stop it first; in case of daemon use --daemon stop"
    exit $RC_OK
  fi
  script="$WCST_IMPORT_PY_SCRIPT"
else
  script="$WCST_IMPORT_DAEMON_PY_SCRIPT"
fi

if [ -n "$user" ]; then
    echo "$PROG: please type password for user '$user':"
    stty_orig=$(stty -g)
    stty -echo
    read -r passwd
    stty "$stty_orig"
elif [ -n "$identity_file_path" ]; then
    if [ ! -f "$identity_file_path" ]; then
        error "identity file '$identity_file_path' does not exist"
    fi
    if [ ! -r "$identity_file_path" ]; then
        error "identity file '$identity_file_path' cannot be read"
    fi

    user_tmp=$(awk -F: '{ print $1 }' "$identity_file_path")
    passwd_tmp=$(awk -F: '{ print $2 }' "$identity_file_path")
    if [ -z "$user_tmp" ] || [ -z "$passwd_tmp" ]; then
        error "cannot parse username or password from the identity file '$identity_file_path'; expected format username:password."
    fi
fi

#
# construct wcst_import.py command
#

# if optional argument is not empty, add it to the argument string
add_args() {
    arg_key="$1"
    arg_val="$2"
    [ -n "$arg_val" ] && wcst_import_py_args="$wcst_import_py_args $arg_key $arg_val"
}

wcst_import_py_args=""
add_args "-d" "$daemon_action"
if [ "$daemon_flag" = true ]; then
  add_args "-w" "$watch_interval"
fi
add_args "--user" "$user"
add_args "--passwd" "$passwd"
add_args "--identity-file" "$identity_file_path"
add_args "--gdal-cache-size" "$gdal_cache_size"

if [ "$quiet" = true ]; then
    python3 "$script" $wcst_import_py_args -i "$ingredients_file" > /dev/null 2>&1
else
    python3 "$script" $wcst_import_py_args -i "$ingredients_file"
fi
