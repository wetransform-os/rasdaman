WORK TO BE DONE

Subsetting currently fails for out-of-bounds requests, in every occasion except
for that of which the intersection of the requested sdom with the data's sdom
is empty.

The expected output is to return an error to the user in case the requested sdom
is not a subset of the data's sdom. See the oob_*.oracle files

The current output is the intersection of the requested sdom with the data's
sdom.

To fix this, the developer should implement a check, after parsing but before
subsets are computed, to verify whether or not the requested_lo is less than
the requested_hi for each coordinate, whether the requested_lo is larger than or
equal to the sdom's low for that coordinate, and similarly for the requested_hi.

In case they are not, the expected error should be thrown.

Furthermore, the developer should verify that the error thrown makes sense in
each case. When computing an sdom, it is not a question of intersection, but
rather a question of subsetting.

Additionally, verify the oracles and the queries for out of bounds requests. The
column # should indicate the start of the requested sdom (typically column 13).

Furthermore, in the 1D case, the being completely out of bounds fails to return
an error at all, and instead returns a completely nonexistent subset.
(see oob_farright_1d and oob_farleft_1d)
(my guess here is that something iterates over the sdoms, and checks a 
proposition to break at the end of the first iteration, so make sure it doesn't
return anything that it is not supposed to before the proposition is satisfied!)

----------------------------------------------
START OF README
----------------------------------------------
This test suite checks that subsetting in rasdaman is handled correctly.
Test queries in the queries directory should use the testdata described below:

* test_subsetting_1d
 - 1D char array
 - sdom: [0:100]
 - tiles: "[0:100]"

* test_subsetting
 - 2D char array
 - sdom: [-500:755,-500:710]
 - tiles: "[0:255,0:210]",
          "[500:755,500:710]",
          "[-500:-245,-500:-290]"

* test_subsetting_single
 - 2D RGB array
 - sdom: [0:399,0:343]
 - tiles: "[0:399,0:343]"

* test_subsetting_3d
 - 3D char array
 - sdom: [0:1,-500:755,-500:710]
 - tiles: "[0:0,-500:-500,-499:-290]",
          "[0:0,-499:-245,-500:-290]", 
          "[1:1,500:755,500:710]",
          "[0:0,-500:-500,-500:-500]"
----------------------------------------------

Summary of test considerations

pick x, y, z and x'', x', y', z' in the interior of the intervals, with x''>x'>x, y'>y, z'>z.
let M and M' be materialized tiles and let N be immaterial
let M'' be a materialized tile on a different slice from M and M'

----------------------------------------------

Notational convention on file names

file    == testtype_positioning_dimension.rasql

z.B.:
file    == oob_farleft_1d.rasql
oob     == out of bounds
farleft == how far out of bounds? both parameters lie to the left
   left == one parameter lies to the left
1d      == dimension of the dataset being considered

additionally, x1star_y1star in the file name means an sdom of the form [x1:*,y1:*]

----------------------------------------------

syntax errors...

1D cases

misordered	x':x        17:10
extra bound	x:x':x''    10:11:12
double asterisk	x:**        10:**
double ":"	x::x'       10::17
empty bound	x:          10:
asterisk slice	*           *

2D cases
empty coord.	x:x',       15:30,

3D cases

----------------------------------------------

various * bounds...

1D cases

*:x     *:50
x:*     50:*
*:*     *:*

2D cases

x:x',y:y'   50:100,50:100
x:x',*:y    50:100,*:50
x:x',y:*    50:100,50:*
x:x',*:*    50:100,*:*

*:x,y:*     *:50,50:*
*:x,*:y     *:50,*:50
x:*,*:*     50:*,*:*

*:*,*:*     *:*,*:*

3D cases

*:x,y:*,*:* *:1,50:*,*:*

-----------------------------------------------

out-of-bounds requests...

1D cases

Left Itct.	-100:50
Right Itct.	50:200
Superset	-100:600
Left Null	-7:-6
Right Null	600:700

2D cases

Top left	-1000:0,-1000:0
Top right	-1000:0,0:1000
Bottom left	0:1000,-1000:0
Bottom right	0:1000,0:1000
Superset	-1000:1000,-1000:1000

3D cases

Top front left	-3:0,-3000:1,-3000:1
Bot. back right	1:3,1:3000,1:3000
Superset	-3:3,-3000:3000,-3000:3000

----------------------------------------------

slices...

1D cases

slice with ":"	x:x     5:5
slice w/o ":"	x       5

2D cases

slice first	x,*:*       5,*:*
slice second	*:*,y       *:*,5
slice both	x,y         5,5

3D cases

slice one	x,*:*,*:*   0,*:*,*:*
slice two	x,y,*:*     0,5,*:*
slice three	x,y,z       0,5,100

-----------------------------------------------

intersecting with tiles both material and immaterial (for our data sets)...

1D cases

N: 		
M:		
M+M':	
M+N:		
M+N+M':		
m:		
n:		

2D cases

M:		-50:50,-50:50
N:		-100:-90,-100:-90
M+N:		-300:-100,-300:-100
M+M'+N:		-300:100,-300:100
m:		-300:-300,-300:-300
n:		-100:-100,-100:-100

3D cases

M:		0:0,-400:-300,-400:-300
N:		1:1,-400:-300,-400:-300
M+N             0:0,-300:300,-300:300
M+M'+N:		0:0,-500:-300,-500:-300
M+N+M'          0:1,-300:600,-300:600
m:		0,-300,-300
n:		1,-300,-300

-----------------------------------------------

running all sdom tests on transient data...

e.g.

if the rasql command for persistent data is:
select sdom(c[*:*,*:*]) from test_subsetting as c

then we can perform sdom on the transient data this way:
select sdom((c+1)[*:*,*:*]) from test_subsetting as c

-----------------------------------------------